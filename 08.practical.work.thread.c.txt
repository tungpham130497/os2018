#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<string.h>
#include<unistd.h>
#include<pthread.h>

#define BUFFER_SIZE 10
typedef struct {
    char type;
    int amount;
    char unit;
} item;

item buffer [BUFFER_SIZE];
int first = 0;
int last = 0;


void *produce(void *arg) {
    item **items = arg;
    while (*items) {
        while ((first + 1) % BUFFER_SIZE == last)
            ;
        printf("produce: first = %d, last = %d\n", (first + 1) % BUFFER_SIZE, last);
        memcpy(&buffer[first], *items, sizeof(item));
        first = (first + 1) % BUFFER_SIZE;
        items++;
    }
}

void *consume(void *arg) {
    int nitems = *((int*) arg);
    while (nitems > 0) {
        item i;
        while (first == last)
            ;
        printf("consume: first = %d, last = %d\n", first, (last + 1) % BUFFER_SIZE);
        memcpy(&i, &buffer[last], sizeof(item));
        last = (last + 1) % BUFFER_SIZE;
        nitems--;
    }
}


void *threadFuncProduce(void *param) {
	item i1, i2, i3;
	i1.type = '0';
	i1.amount = 1;
	i1.unit = '0';
	
	i2.type = '1';
	i2.amount = 1;
	i2.unit = '1';

	i3.type = '0';
	i3.amount = 1;
	i3.unit = '0';


	produce (&i1);
	produce (&i2);
	produce (&i3);
	printf("After produce: First: %d, Last: %d\n", first, last);
}

void *threadFuncConsume(void *param) {
	consume();
	printf("After consume: First: %d, Last: %d\n", first, last);
}

int main() {
	pthread_t tid1,tid2;
	pthread_create(&tid1, NULL, producer, NULL);
	pthread_join(tid1, NULL);
 	pthread_create(&tid2, NULL, consumer, NULL);
	pthread_join(tid2, NULL);

        printf("After produce: First: %d Last %d \n", first, last);
        consume();
        printf("After consume: First: %d Last %d \n", first, last);
	return 0;
}
